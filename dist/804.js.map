{"version":3,"file":"804.js","mappings":"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","sources":["webpack://@bbon/formatter-example/./node_modules/@bbon/formatter/dist/index.esm.js","webpack://@bbon/formatter-example/./src/components/Example/Example.tsx","webpack://@bbon/formatter-example/./src/components/Home/Home.tsx"],"sourcesContent":["var ValueTooHugeError = /** @class */ (function () {\r\n    function ValueTooHugeError(message) {\r\n        this.name = 'ValueTooHugeError';\r\n        this.message = message !== null && message !== void 0 ? message : 'The value is too huge to handle';\r\n    }\r\n    return ValueTooHugeError;\r\n}());\n\nvar ValueInvalidError = /** @class */ (function () {\r\n    function ValueInvalidError(message) {\r\n        this.name = 'ValueInvalidError';\r\n        this.message = message !== null && message !== void 0 ? message : 'The value is invalid.';\r\n    }\r\n    return ValueInvalidError;\r\n}());\n\n/**\r\n * 포맷팅 기능을 제공합니다.\r\n *\r\n * @export\r\n * @class StringFormatter\r\n */\r\nvar StringFormatter = /** @class */ (function () {\r\n    function StringFormatter() {\r\n    }\r\n    /**\r\n     * 숫자에 1000 단위 구분자를 추가해서 문자열로 출력합니다.\r\n     *\r\n     * @param {(number | string)} value\r\n     * @param {string} delimiter 구분자; 기본값: **,** 콤마 문자\r\n     * @returns {string}\r\n     * @memberof StringFormatter\r\n     */\r\n    StringFormatter.prototype.numberWithDelimiter = function (value, delimiter) {\r\n        if (delimiter === void 0) { delimiter = ','; }\r\n        var stringValue = '';\r\n        var fraction = '';\r\n        if (typeof value === 'number') {\r\n            stringValue = value.toString();\r\n        }\r\n        if (typeof value === 'string') {\r\n            stringValue = value;\r\n        }\r\n        if (stringValue.indexOf('.') >= 0) {\r\n            var splittedValue = stringValue.split('.');\r\n            if (splittedValue.length > 1) {\r\n                stringValue = splittedValue[0];\r\n                fraction = splittedValue[1];\r\n            }\r\n        }\r\n        stringValue = stringValue.replace(/\\B(?=(\\d{3})+(?!\\d))/g, delimiter);\r\n        return \"\".concat(stringValue).concat(fraction ? \".\".concat(fraction) : '');\r\n    };\r\n    /**\r\n     * 숫자에 1000 단위 구분자를 추가해서 문자열로 출력합니다.\r\n     *\r\n     * @param {(number | string)} value\r\n     * @param {string} delimiter 구분자; 기본값: **,** 콤마 문자\r\n     * @returns {string}\r\n     * @memberof StringFormatter\r\n     * @deprecated May be removed at next version.\r\n     */\r\n    StringFormatter.prototype.NumberWithDelimiter = function (value, delimiter) {\r\n        if (delimiter === void 0) { delimiter = ','; }\r\n        return this.numberWithDelimiter(value, delimiter);\r\n    };\r\n    /**\r\n     * 파일 크기를 출력합니다.\r\n     *\r\n     * @param {number} value\r\n     * @param {NumberFormatter} [numberFormatter]\r\n     * @param {string[]} [units]\r\n     * @returns {string}\r\n     * @memberof StringFormatter\r\n     * @example\r\n     * ```typescript\r\n     * const fomatter = new StringFormatter()\r\n     * fomatter.fileSize(10240);\r\n     * ```\r\n     */\r\n    StringFormatter.prototype.fileSize = function (value, numberFormatter, units) {\r\n        var numberValue = this.ensureNumberValue(value);\r\n        if (Number.MAX_VALUE < numberValue) {\r\n            throw new ValueTooHugeError();\r\n        }\r\n        var defaultUnits = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\r\n        var actualUnits = units !== null && units !== void 0 ? units : defaultUnits;\r\n        var basis = 1024.0;\r\n        var index = 0;\r\n        var temp = numberValue;\r\n        if (temp < basis) {\r\n            return this.toFomattedFileSize(Math.floor(temp).toString(), actualUnits[this.min(index, actualUnits.length - 1)], numberFormatter);\r\n        }\r\n        do {\r\n            temp = temp / basis;\r\n            index++;\r\n        } while (temp > basis && index < actualUnits.length - 1);\r\n        return this.toFomattedFileSize(Math.ceil(temp) > temp ? temp.toFixed(2) : temp.toFixed(0), actualUnits[this.min(index, actualUnits.length - 1)], numberFormatter);\r\n    };\r\n    StringFormatter.prototype.toFomattedFileSize = function (value, unit, numberFormatter) {\r\n        var stringValue = '';\r\n        if (typeof numberFormatter === 'function') {\r\n            stringValue = numberFormatter(value);\r\n        }\r\n        else {\r\n            stringValue = value;\r\n        }\r\n        return \"\".concat(stringValue, \" \").concat(unit);\r\n    };\r\n    StringFormatter.prototype.ensureNumberValue = function (value) {\r\n        if (typeof value === 'undefined') {\r\n            return 0;\r\n        }\r\n        if (typeof value === 'string') {\r\n            var numberValue = parseFloat(value);\r\n            if (Number.isNaN(numberValue)) {\r\n                throw new ValueInvalidError();\r\n            }\r\n            return numberValue;\r\n        }\r\n        return value;\r\n    };\r\n    StringFormatter.prototype.min = function (a, b) {\r\n        return a > b ? b : a;\r\n    };\r\n    return StringFormatter;\r\n}());\n\nexport { StringFormatter, ValueInvalidError, ValueTooHugeError };\n//# sourceMappingURL=index.esm.js.map\n","import { StringFormatter } from '@bbon/formatter';\nimport React, { useMemo, useState } from 'react';\n\nconst Example = () => {\n    const formatter = new StringFormatter();\n    const [value, setValue] = useState('');\n\n    const numberValue = useMemo(() => {\n        const numberValue = parseInt(value, 10);\n        if (Number.isNaN(numberValue)) {\n            return undefined;\n        }\n\n        return numberValue;\n    }, [value]);\n\n    const handleChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const inputValue = event.currentTarget.value;\n        const numberValue = parseInt(inputValue, 10);\n\n        if (inputValue.length < 14) {\n            if (!inputValue) {\n                setValue((_) => '');\n            }\n\n            if (!Number.isNaN(numberValue)) {\n                setValue((_) => inputValue);\n            }\n        }\n    };\n\n    return (\n        <div>\n            <div>\n                <input\n                    type=\"number\"\n                    onChange={handleChangeInput}\n                    value={value}\n                    maxLength={13}\n                />\n            </div>\n            <div>\n                <dl>\n                    <dt>Format:</dt>\n                    <dd>\n                        {typeof numberValue === 'undefined'\n                            ? 'Value is not number'\n                            : formatter.numberWithDelimiter(numberValue)}\n                    </dd>\n                    <dt>File size:</dt>\n                    <dd>\n                        {typeof numberValue === 'undefined'\n                            ? 'Value is not number'\n                            : formatter.fileSize(\n                                  numberValue,\n                                  formatter.numberWithDelimiter,\n                              )}\n                    </dd>\n                </dl>\n            </div>\n        </div>\n    );\n};\n\nexport default Example;\n","import React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport Example from '../Example';\nexport const Home = () => {\n    return (\n        <React.Fragment>\n            <Helmet>\n                <title>Home</title>\n            </Helmet>\n            <div>\n                <h1>Formatter</h1>\n                <Example />\n            </div>\n        </React.Fragment>\n    );\n};\n"],"names":["ValueTooHugeError","message","this","name","ValueInvalidError","StringFormatter","prototype","numberWithDelimiter","value","delimiter","stringValue","fraction","toString","indexOf","splittedValue","split","length","replace","concat","NumberWithDelimiter","fileSize","numberFormatter","units","numberValue","ensureNumberValue","Number","MAX_VALUE","actualUnits","basis","index","temp","toFomattedFileSize","Math","floor","min","ceil","toFixed","unit","parseFloat","isNaN","a","b","formatter","useState","setValue","useMemo","parseInt","type","onChange","event","inputValue","currentTarget","_","maxLength","Home"],"sourceRoot":""}